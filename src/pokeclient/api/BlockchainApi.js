/**
 * Pokecoin
 * The Pokecoin documentation
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBlockBody from '../model/AddBlockBody';
import AddBlockErrorResponse from '../model/AddBlockErrorResponse';
import AddBlockResponse from '../model/AddBlockResponse';
import Block from '../model/Block';
import UnauthorizedError from '../model/UnauthorizedError';
import UnexpectedError from '../model/UnexpectedError';

/**
* Blockchain service.
* @module api/BlockchainApi
* @version 1.4.0
*/
export default class BlockchainApi {

    /**
    * Constructs a new BlockchainApi. 
    * @alias module:api/BlockchainApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:model/AddBlockBody} addBlockBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddBlockResponse} and HTTP response
     */
    blockchainBlocksPostWithHttpInfo(addBlockBody) {
      let postBody = addBlockBody;
      // verify the required parameter 'addBlockBody' is set
      if (addBlockBody === undefined || addBlockBody === null) {
        throw new Error("Missing the required parameter 'addBlockBody' when calling blockchainBlocksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddBlockResponse;
      return this.apiClient.callApi(
        '/blockchain/blocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/AddBlockBody} addBlockBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddBlockResponse}
     */
    blockchainBlocksPost(addBlockBody) {
      return this.blockchainBlocksPostWithHttpInfo(addBlockBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    blockchainCurrentDifficultyGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/blockchain/currentDifficulty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    blockchainCurrentDifficultyGet() {
      return this.blockchainCurrentDifficultyGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Block} and HTTP response
     */
    blockchainLastBlockGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Block;
      return this.apiClient.callApi(
        '/blockchain/lastBlock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Block}
     */
    blockchainLastBlockGet() {
      return this.blockchainLastBlockGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
