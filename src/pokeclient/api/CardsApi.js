/**
 * Pokecoin
 * The Pokecoin documentation
 *
 * The version of the OpenAPI document: 1.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BuyDefaultPackageSchemaResponse from "../model/BuyDefaultPackageSchemaResponse";
import CardPack from "../model/CardPack";
import CardResponse from "../model/CardResponse";
import CardsResponse from "../model/CardsResponse";
import UnauthorizedError from "../model/UnauthorizedError";
import UnexpectedError from "../model/UnexpectedError";
import UserCard from "../model/UserCard";

/**
 * Cards service.
 * @module api/CardsApi
 * @version 1.4.0
 */
export default class CardsApi {
  /**
   * Constructs a new CardsApi.
   * @alias module:api/CardsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * @param {String} cardId card id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardResponse} and HTTP response
   */
  cardsCardIdGetWithHttpInfo(cardId) {
    let postBody = null;
    // verify the required parameter 'cardId' is set
    if (cardId === undefined || cardId === null) {
      throw new Error(
        "Missing the required parameter 'cardId' when calling cardsCardIdGet"
      );
    }

    let pathParams = {
      cardId: cardId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CardResponse;
    return this.apiClient.callApi(
      "/cards/{cardId}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} cardId card id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardResponse}
   */
  cardsCardIdGet(cardId) {
    return this.cardsCardIdGetWithHttpInfo(cardId).then(function(
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.page Page starting by index 0
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardsResponse} and HTTP response
   */
  cardsGetWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"]
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CardsResponse;
    return this.apiClient.callApi(
      "/cards/",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.page Page starting by index 0
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardsResponse}
   */
  cardsGet(opts) {
    return this.cardsGetWithHttpInfo(opts).then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} cardPackName name of the cardpack
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BuyDefaultPackageSchemaResponse} and HTTP response
   */
  cardsPackagesCardPackNameBuyDefaultPackageGetWithHttpInfo(cardPackName) {
    let postBody = null;
    // verify the required parameter 'cardPackName' is set
    if (cardPackName === undefined || cardPackName === null) {
      throw new Error(
        "Missing the required parameter 'cardPackName' when calling cardsPackagesCardPackNameBuyDefaultPackageGet"
      );
    }

    let pathParams = {
      cardPackName: cardPackName
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["token"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = BuyDefaultPackageSchemaResponse;
    return this.apiClient.callApi(
      "/cards/packages/{cardPackName}/buyDefaultPackage",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} cardPackName name of the cardpack
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BuyDefaultPackageSchemaResponse}
   */
  cardsPackagesCardPackNameBuyDefaultPackageGet(cardPackName) {
    return this.cardsPackagesCardPackNameBuyDefaultPackageGetWithHttpInfo(
      cardPackName
    ).then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} cardPackName name of the cardpack
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CardPack} and HTTP response
   */
  cardsPackagesCardPackNameGetWithHttpInfo(cardPackName) {
    let postBody = null;
    // verify the required parameter 'cardPackName' is set
    if (cardPackName === undefined || cardPackName === null) {
      throw new Error(
        "Missing the required parameter 'cardPackName' when calling cardsPackagesCardPackNameGet"
      );
    }

    let pathParams = {
      cardPackName: cardPackName
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = CardPack;
    return this.apiClient.callApi(
      "/cards/packages/{cardPackName}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} cardPackName name of the cardpack
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CardPack}
   */
  cardsPackagesCardPackNameGet(cardPackName) {
    return this.cardsPackagesCardPackNameGetWithHttpInfo(cardPackName).then(
      function(response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
   */
  cardsPackagesCurrentPackageCostGetWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = "Number";
    return this.apiClient.callApi(
      "/cards/packages/currentPackageCost",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
   */
  cardsPackagesCurrentPackageCostGet() {
    return this.cardsPackagesCurrentPackageCostGetWithHttpInfo().then(function(
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
   */
  cardsPackagesGetWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = ["String"];
    return this.apiClient.callApi(
      "/cards/packages",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
   */
  cardsPackagesGet() {
    return this.cardsPackagesGetWithHttpInfo().then(function(
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserCard>} and HTTP response
   */
  cardsUsercardsGetWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["token"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [UserCard];
    return this.apiClient.callApi(
      "/cards/usercards",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserCard>}
   */
  cardsUsercardsGet() {
    return this.cardsUsercardsGetWithHttpInfo().then(function(
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
